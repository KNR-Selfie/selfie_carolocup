#!/usr/bin/env python

import rospy

from functools import partial
from std_msgs.msg import Bool
from capabilities.client import CapabilitiesClient

system_initialized = False

def button_callback(btn, msg):
    global system_initialized

    # Proceed only if the system is not initialized
    if system_initialized: return

    if msg.data == False:
        # Keep flashing turn indicators
        lt_pub.publish(True)
        lt_pub.publish(True)
    else:
        system_initialized = True

        # Stop flashing turn indicators
        lt_pub.publish(False)
        rt_pub.publish(False)

        rospy.loginfo('Initializing scenario #%i', btn)

        client.use_capability('selfie/DynamicEvent',
                              'selfie/scenario_{}'.format(btn))


if __name__ == '__main__':
    rospy.init_node('initialization')

    global client
    client = CapabilitiesClient()

    rospy.loginfo('Waiting for Capability Server')
    client.wait_for_services()
    rospy.loginfo('Capability Server available')

    global lt_pub, rt_pub
    lt_pub = rospy.Publisher('left_turn_indicator',  Bool, queue_size=1)
    rt_pub = rospy.Publisher('right_turn_indicator', Bool, queue_size=1)

    lt_pub.publish(True)
    rt_pub.publish(True)

    b1_sub = rospy.Subscriber('start_button1', Bool, partial(button_callback, 1))
    b2_sub = rospy.Subscriber('start_button2', Bool, partial(button_callback, 2))

    rospy.spin()
